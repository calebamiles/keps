// Code generated by counterfeiter. DO NOT EDIT.
package orgsfakes

import (
	sync "sync"

	orgs "github.com/calebamiles/keps/pkg/orgs"
	settings "github.com/calebamiles/keps/pkg/settings"
)

type FakeInstance struct {
	ApiReviewRepositoryStub        func() string
	apiReviewRepositoryMutex       sync.RWMutex
	apiReviewRepositoryArgsForCall []struct {
	}
	apiReviewRepositoryReturns struct {
		result1 string
	}
	apiReviewRepositoryReturnsOnCall map[int]struct {
		result1 string
	}
	ApiReviewRepositoryChangesetSourceStub        func() string
	apiReviewRepositoryChangesetSourceMutex       sync.RWMutex
	apiReviewRepositoryChangesetSourceArgsForCall []struct {
	}
	apiReviewRepositoryChangesetSourceReturns struct {
		result1 string
	}
	apiReviewRepositoryChangesetSourceReturnsOnCall map[int]struct {
		result1 string
	}
	ApiReviewRepositoryChangesetTargetStub        func() string
	apiReviewRepositoryChangesetTargetMutex       sync.RWMutex
	apiReviewRepositoryChangesetTargetArgsForCall []struct {
	}
	apiReviewRepositoryChangesetTargetReturns struct {
		result1 string
	}
	apiReviewRepositoryChangesetTargetReturnsOnCall map[int]struct {
		result1 string
	}
	ApiReviewRepositoryDefaultSourceBranchStub        func() string
	apiReviewRepositoryDefaultSourceBranchMutex       sync.RWMutex
	apiReviewRepositoryDefaultSourceBranchArgsForCall []struct {
	}
	apiReviewRepositoryDefaultSourceBranchReturns struct {
		result1 string
	}
	apiReviewRepositoryDefaultSourceBranchReturnsOnCall map[int]struct {
		result1 string
	}
	ApiReviewRepositoryDefaultTargetBranchStub        func() string
	apiReviewRepositoryDefaultTargetBranchMutex       sync.RWMutex
	apiReviewRepositoryDefaultTargetBranchArgsForCall []struct {
	}
	apiReviewRepositoryDefaultTargetBranchReturns struct {
		result1 string
	}
	apiReviewRepositoryDefaultTargetBranchReturnsOnCall map[int]struct {
		result1 string
	}
	ApiReviewRepositoryOwnerStub        func() string
	apiReviewRepositoryOwnerMutex       sync.RWMutex
	apiReviewRepositoryOwnerArgsForCall []struct {
	}
	apiReviewRepositoryOwnerReturns struct {
		result1 string
	}
	apiReviewRepositoryOwnerReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsRepositoryStub        func() string
	enhancementsRepositoryMutex       sync.RWMutex
	enhancementsRepositoryArgsForCall []struct {
	}
	enhancementsRepositoryReturns struct {
		result1 string
	}
	enhancementsRepositoryReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsRepositoryChangesetSourceStub        func() string
	enhancementsRepositoryChangesetSourceMutex       sync.RWMutex
	enhancementsRepositoryChangesetSourceArgsForCall []struct {
	}
	enhancementsRepositoryChangesetSourceReturns struct {
		result1 string
	}
	enhancementsRepositoryChangesetSourceReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsRepositoryChangesetTargetStub        func() string
	enhancementsRepositoryChangesetTargetMutex       sync.RWMutex
	enhancementsRepositoryChangesetTargetArgsForCall []struct {
	}
	enhancementsRepositoryChangesetTargetReturns struct {
		result1 string
	}
	enhancementsRepositoryChangesetTargetReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsRepositoryDefaultSourceBranchStub        func() string
	enhancementsRepositoryDefaultSourceBranchMutex       sync.RWMutex
	enhancementsRepositoryDefaultSourceBranchArgsForCall []struct {
	}
	enhancementsRepositoryDefaultSourceBranchReturns struct {
		result1 string
	}
	enhancementsRepositoryDefaultSourceBranchReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsRepositoryDefaultTargetBranchStub        func() string
	enhancementsRepositoryDefaultTargetBranchMutex       sync.RWMutex
	enhancementsRepositoryDefaultTargetBranchArgsForCall []struct {
	}
	enhancementsRepositoryDefaultTargetBranchReturns struct {
		result1 string
	}
	enhancementsRepositoryDefaultTargetBranchReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsRepositoryOwnerStub        func() string
	enhancementsRepositoryOwnerMutex       sync.RWMutex
	enhancementsRepositoryOwnerArgsForCall []struct {
	}
	enhancementsRepositoryOwnerReturns struct {
		result1 string
	}
	enhancementsRepositoryOwnerReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsTrackingRepositoryStub        func() string
	enhancementsTrackingRepositoryMutex       sync.RWMutex
	enhancementsTrackingRepositoryArgsForCall []struct {
	}
	enhancementsTrackingRepositoryReturns struct {
		result1 string
	}
	enhancementsTrackingRepositoryReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsTrackingRepositoryChangesetSourceStub        func() string
	enhancementsTrackingRepositoryChangesetSourceMutex       sync.RWMutex
	enhancementsTrackingRepositoryChangesetSourceArgsForCall []struct {
	}
	enhancementsTrackingRepositoryChangesetSourceReturns struct {
		result1 string
	}
	enhancementsTrackingRepositoryChangesetSourceReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsTrackingRepositoryChangesetTargetStub        func() string
	enhancementsTrackingRepositoryChangesetTargetMutex       sync.RWMutex
	enhancementsTrackingRepositoryChangesetTargetArgsForCall []struct {
	}
	enhancementsTrackingRepositoryChangesetTargetReturns struct {
		result1 string
	}
	enhancementsTrackingRepositoryChangesetTargetReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsTrackingRepositoryDefaultSourceBranchStub        func() string
	enhancementsTrackingRepositoryDefaultSourceBranchMutex       sync.RWMutex
	enhancementsTrackingRepositoryDefaultSourceBranchArgsForCall []struct {
	}
	enhancementsTrackingRepositoryDefaultSourceBranchReturns struct {
		result1 string
	}
	enhancementsTrackingRepositoryDefaultSourceBranchReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsTrackingRepositoryDefaultTargetBranchStub        func() string
	enhancementsTrackingRepositoryDefaultTargetBranchMutex       sync.RWMutex
	enhancementsTrackingRepositoryDefaultTargetBranchArgsForCall []struct {
	}
	enhancementsTrackingRepositoryDefaultTargetBranchReturns struct {
		result1 string
	}
	enhancementsTrackingRepositoryDefaultTargetBranchReturnsOnCall map[int]struct {
		result1 string
	}
	EnhancementsTrackingRepositoryOwnerStub        func() string
	enhancementsTrackingRepositoryOwnerMutex       sync.RWMutex
	enhancementsTrackingRepositoryOwnerArgsForCall []struct {
	}
	enhancementsTrackingRepositoryOwnerReturns struct {
		result1 string
	}
	enhancementsTrackingRepositoryOwnerReturnsOnCall map[int]struct {
		result1 string
	}
	IsAuthorizedStub        func(settings.Runtime) (bool, error)
	isAuthorizedMutex       sync.RWMutex
	isAuthorizedArgsForCall []struct {
		arg1 settings.Runtime
	}
	isAuthorizedReturns struct {
		result1 bool
		result2 error
	}
	isAuthorizedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstance) ApiReviewRepository() string {
	fake.apiReviewRepositoryMutex.Lock()
	ret, specificReturn := fake.apiReviewRepositoryReturnsOnCall[len(fake.apiReviewRepositoryArgsForCall)]
	fake.apiReviewRepositoryArgsForCall = append(fake.apiReviewRepositoryArgsForCall, struct {
	}{})
	fake.recordInvocation("ApiReviewRepository", []interface{}{})
	fake.apiReviewRepositoryMutex.Unlock()
	if fake.ApiReviewRepositoryStub != nil {
		return fake.ApiReviewRepositoryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.apiReviewRepositoryReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) ApiReviewRepositoryCallCount() int {
	fake.apiReviewRepositoryMutex.RLock()
	defer fake.apiReviewRepositoryMutex.RUnlock()
	return len(fake.apiReviewRepositoryArgsForCall)
}

func (fake *FakeInstance) ApiReviewRepositoryReturns(result1 string) {
	fake.ApiReviewRepositoryStub = nil
	fake.apiReviewRepositoryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryReturnsOnCall(i int, result1 string) {
	fake.ApiReviewRepositoryStub = nil
	if fake.apiReviewRepositoryReturnsOnCall == nil {
		fake.apiReviewRepositoryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.apiReviewRepositoryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetSource() string {
	fake.apiReviewRepositoryChangesetSourceMutex.Lock()
	ret, specificReturn := fake.apiReviewRepositoryChangesetSourceReturnsOnCall[len(fake.apiReviewRepositoryChangesetSourceArgsForCall)]
	fake.apiReviewRepositoryChangesetSourceArgsForCall = append(fake.apiReviewRepositoryChangesetSourceArgsForCall, struct {
	}{})
	fake.recordInvocation("ApiReviewRepositoryChangesetSource", []interface{}{})
	fake.apiReviewRepositoryChangesetSourceMutex.Unlock()
	if fake.ApiReviewRepositoryChangesetSourceStub != nil {
		return fake.ApiReviewRepositoryChangesetSourceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.apiReviewRepositoryChangesetSourceReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetSourceCallCount() int {
	fake.apiReviewRepositoryChangesetSourceMutex.RLock()
	defer fake.apiReviewRepositoryChangesetSourceMutex.RUnlock()
	return len(fake.apiReviewRepositoryChangesetSourceArgsForCall)
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetSourceReturns(result1 string) {
	fake.ApiReviewRepositoryChangesetSourceStub = nil
	fake.apiReviewRepositoryChangesetSourceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetSourceReturnsOnCall(i int, result1 string) {
	fake.ApiReviewRepositoryChangesetSourceStub = nil
	if fake.apiReviewRepositoryChangesetSourceReturnsOnCall == nil {
		fake.apiReviewRepositoryChangesetSourceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.apiReviewRepositoryChangesetSourceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetTarget() string {
	fake.apiReviewRepositoryChangesetTargetMutex.Lock()
	ret, specificReturn := fake.apiReviewRepositoryChangesetTargetReturnsOnCall[len(fake.apiReviewRepositoryChangesetTargetArgsForCall)]
	fake.apiReviewRepositoryChangesetTargetArgsForCall = append(fake.apiReviewRepositoryChangesetTargetArgsForCall, struct {
	}{})
	fake.recordInvocation("ApiReviewRepositoryChangesetTarget", []interface{}{})
	fake.apiReviewRepositoryChangesetTargetMutex.Unlock()
	if fake.ApiReviewRepositoryChangesetTargetStub != nil {
		return fake.ApiReviewRepositoryChangesetTargetStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.apiReviewRepositoryChangesetTargetReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetTargetCallCount() int {
	fake.apiReviewRepositoryChangesetTargetMutex.RLock()
	defer fake.apiReviewRepositoryChangesetTargetMutex.RUnlock()
	return len(fake.apiReviewRepositoryChangesetTargetArgsForCall)
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetTargetReturns(result1 string) {
	fake.ApiReviewRepositoryChangesetTargetStub = nil
	fake.apiReviewRepositoryChangesetTargetReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryChangesetTargetReturnsOnCall(i int, result1 string) {
	fake.ApiReviewRepositoryChangesetTargetStub = nil
	if fake.apiReviewRepositoryChangesetTargetReturnsOnCall == nil {
		fake.apiReviewRepositoryChangesetTargetReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.apiReviewRepositoryChangesetTargetReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultSourceBranch() string {
	fake.apiReviewRepositoryDefaultSourceBranchMutex.Lock()
	ret, specificReturn := fake.apiReviewRepositoryDefaultSourceBranchReturnsOnCall[len(fake.apiReviewRepositoryDefaultSourceBranchArgsForCall)]
	fake.apiReviewRepositoryDefaultSourceBranchArgsForCall = append(fake.apiReviewRepositoryDefaultSourceBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("ApiReviewRepositoryDefaultSourceBranch", []interface{}{})
	fake.apiReviewRepositoryDefaultSourceBranchMutex.Unlock()
	if fake.ApiReviewRepositoryDefaultSourceBranchStub != nil {
		return fake.ApiReviewRepositoryDefaultSourceBranchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.apiReviewRepositoryDefaultSourceBranchReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultSourceBranchCallCount() int {
	fake.apiReviewRepositoryDefaultSourceBranchMutex.RLock()
	defer fake.apiReviewRepositoryDefaultSourceBranchMutex.RUnlock()
	return len(fake.apiReviewRepositoryDefaultSourceBranchArgsForCall)
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultSourceBranchReturns(result1 string) {
	fake.ApiReviewRepositoryDefaultSourceBranchStub = nil
	fake.apiReviewRepositoryDefaultSourceBranchReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultSourceBranchReturnsOnCall(i int, result1 string) {
	fake.ApiReviewRepositoryDefaultSourceBranchStub = nil
	if fake.apiReviewRepositoryDefaultSourceBranchReturnsOnCall == nil {
		fake.apiReviewRepositoryDefaultSourceBranchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.apiReviewRepositoryDefaultSourceBranchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultTargetBranch() string {
	fake.apiReviewRepositoryDefaultTargetBranchMutex.Lock()
	ret, specificReturn := fake.apiReviewRepositoryDefaultTargetBranchReturnsOnCall[len(fake.apiReviewRepositoryDefaultTargetBranchArgsForCall)]
	fake.apiReviewRepositoryDefaultTargetBranchArgsForCall = append(fake.apiReviewRepositoryDefaultTargetBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("ApiReviewRepositoryDefaultTargetBranch", []interface{}{})
	fake.apiReviewRepositoryDefaultTargetBranchMutex.Unlock()
	if fake.ApiReviewRepositoryDefaultTargetBranchStub != nil {
		return fake.ApiReviewRepositoryDefaultTargetBranchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.apiReviewRepositoryDefaultTargetBranchReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultTargetBranchCallCount() int {
	fake.apiReviewRepositoryDefaultTargetBranchMutex.RLock()
	defer fake.apiReviewRepositoryDefaultTargetBranchMutex.RUnlock()
	return len(fake.apiReviewRepositoryDefaultTargetBranchArgsForCall)
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultTargetBranchReturns(result1 string) {
	fake.ApiReviewRepositoryDefaultTargetBranchStub = nil
	fake.apiReviewRepositoryDefaultTargetBranchReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryDefaultTargetBranchReturnsOnCall(i int, result1 string) {
	fake.ApiReviewRepositoryDefaultTargetBranchStub = nil
	if fake.apiReviewRepositoryDefaultTargetBranchReturnsOnCall == nil {
		fake.apiReviewRepositoryDefaultTargetBranchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.apiReviewRepositoryDefaultTargetBranchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryOwner() string {
	fake.apiReviewRepositoryOwnerMutex.Lock()
	ret, specificReturn := fake.apiReviewRepositoryOwnerReturnsOnCall[len(fake.apiReviewRepositoryOwnerArgsForCall)]
	fake.apiReviewRepositoryOwnerArgsForCall = append(fake.apiReviewRepositoryOwnerArgsForCall, struct {
	}{})
	fake.recordInvocation("ApiReviewRepositoryOwner", []interface{}{})
	fake.apiReviewRepositoryOwnerMutex.Unlock()
	if fake.ApiReviewRepositoryOwnerStub != nil {
		return fake.ApiReviewRepositoryOwnerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.apiReviewRepositoryOwnerReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) ApiReviewRepositoryOwnerCallCount() int {
	fake.apiReviewRepositoryOwnerMutex.RLock()
	defer fake.apiReviewRepositoryOwnerMutex.RUnlock()
	return len(fake.apiReviewRepositoryOwnerArgsForCall)
}

func (fake *FakeInstance) ApiReviewRepositoryOwnerReturns(result1 string) {
	fake.ApiReviewRepositoryOwnerStub = nil
	fake.apiReviewRepositoryOwnerReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) ApiReviewRepositoryOwnerReturnsOnCall(i int, result1 string) {
	fake.ApiReviewRepositoryOwnerStub = nil
	if fake.apiReviewRepositoryOwnerReturnsOnCall == nil {
		fake.apiReviewRepositoryOwnerReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.apiReviewRepositoryOwnerReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepository() string {
	fake.enhancementsRepositoryMutex.Lock()
	ret, specificReturn := fake.enhancementsRepositoryReturnsOnCall[len(fake.enhancementsRepositoryArgsForCall)]
	fake.enhancementsRepositoryArgsForCall = append(fake.enhancementsRepositoryArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsRepository", []interface{}{})
	fake.enhancementsRepositoryMutex.Unlock()
	if fake.EnhancementsRepositoryStub != nil {
		return fake.EnhancementsRepositoryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsRepositoryReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsRepositoryCallCount() int {
	fake.enhancementsRepositoryMutex.RLock()
	defer fake.enhancementsRepositoryMutex.RUnlock()
	return len(fake.enhancementsRepositoryArgsForCall)
}

func (fake *FakeInstance) EnhancementsRepositoryReturns(result1 string) {
	fake.EnhancementsRepositoryStub = nil
	fake.enhancementsRepositoryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryReturnsOnCall(i int, result1 string) {
	fake.EnhancementsRepositoryStub = nil
	if fake.enhancementsRepositoryReturnsOnCall == nil {
		fake.enhancementsRepositoryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsRepositoryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetSource() string {
	fake.enhancementsRepositoryChangesetSourceMutex.Lock()
	ret, specificReturn := fake.enhancementsRepositoryChangesetSourceReturnsOnCall[len(fake.enhancementsRepositoryChangesetSourceArgsForCall)]
	fake.enhancementsRepositoryChangesetSourceArgsForCall = append(fake.enhancementsRepositoryChangesetSourceArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsRepositoryChangesetSource", []interface{}{})
	fake.enhancementsRepositoryChangesetSourceMutex.Unlock()
	if fake.EnhancementsRepositoryChangesetSourceStub != nil {
		return fake.EnhancementsRepositoryChangesetSourceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsRepositoryChangesetSourceReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetSourceCallCount() int {
	fake.enhancementsRepositoryChangesetSourceMutex.RLock()
	defer fake.enhancementsRepositoryChangesetSourceMutex.RUnlock()
	return len(fake.enhancementsRepositoryChangesetSourceArgsForCall)
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetSourceReturns(result1 string) {
	fake.EnhancementsRepositoryChangesetSourceStub = nil
	fake.enhancementsRepositoryChangesetSourceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetSourceReturnsOnCall(i int, result1 string) {
	fake.EnhancementsRepositoryChangesetSourceStub = nil
	if fake.enhancementsRepositoryChangesetSourceReturnsOnCall == nil {
		fake.enhancementsRepositoryChangesetSourceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsRepositoryChangesetSourceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetTarget() string {
	fake.enhancementsRepositoryChangesetTargetMutex.Lock()
	ret, specificReturn := fake.enhancementsRepositoryChangesetTargetReturnsOnCall[len(fake.enhancementsRepositoryChangesetTargetArgsForCall)]
	fake.enhancementsRepositoryChangesetTargetArgsForCall = append(fake.enhancementsRepositoryChangesetTargetArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsRepositoryChangesetTarget", []interface{}{})
	fake.enhancementsRepositoryChangesetTargetMutex.Unlock()
	if fake.EnhancementsRepositoryChangesetTargetStub != nil {
		return fake.EnhancementsRepositoryChangesetTargetStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsRepositoryChangesetTargetReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetTargetCallCount() int {
	fake.enhancementsRepositoryChangesetTargetMutex.RLock()
	defer fake.enhancementsRepositoryChangesetTargetMutex.RUnlock()
	return len(fake.enhancementsRepositoryChangesetTargetArgsForCall)
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetTargetReturns(result1 string) {
	fake.EnhancementsRepositoryChangesetTargetStub = nil
	fake.enhancementsRepositoryChangesetTargetReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryChangesetTargetReturnsOnCall(i int, result1 string) {
	fake.EnhancementsRepositoryChangesetTargetStub = nil
	if fake.enhancementsRepositoryChangesetTargetReturnsOnCall == nil {
		fake.enhancementsRepositoryChangesetTargetReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsRepositoryChangesetTargetReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultSourceBranch() string {
	fake.enhancementsRepositoryDefaultSourceBranchMutex.Lock()
	ret, specificReturn := fake.enhancementsRepositoryDefaultSourceBranchReturnsOnCall[len(fake.enhancementsRepositoryDefaultSourceBranchArgsForCall)]
	fake.enhancementsRepositoryDefaultSourceBranchArgsForCall = append(fake.enhancementsRepositoryDefaultSourceBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsRepositoryDefaultSourceBranch", []interface{}{})
	fake.enhancementsRepositoryDefaultSourceBranchMutex.Unlock()
	if fake.EnhancementsRepositoryDefaultSourceBranchStub != nil {
		return fake.EnhancementsRepositoryDefaultSourceBranchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsRepositoryDefaultSourceBranchReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultSourceBranchCallCount() int {
	fake.enhancementsRepositoryDefaultSourceBranchMutex.RLock()
	defer fake.enhancementsRepositoryDefaultSourceBranchMutex.RUnlock()
	return len(fake.enhancementsRepositoryDefaultSourceBranchArgsForCall)
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultSourceBranchReturns(result1 string) {
	fake.EnhancementsRepositoryDefaultSourceBranchStub = nil
	fake.enhancementsRepositoryDefaultSourceBranchReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultSourceBranchReturnsOnCall(i int, result1 string) {
	fake.EnhancementsRepositoryDefaultSourceBranchStub = nil
	if fake.enhancementsRepositoryDefaultSourceBranchReturnsOnCall == nil {
		fake.enhancementsRepositoryDefaultSourceBranchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsRepositoryDefaultSourceBranchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultTargetBranch() string {
	fake.enhancementsRepositoryDefaultTargetBranchMutex.Lock()
	ret, specificReturn := fake.enhancementsRepositoryDefaultTargetBranchReturnsOnCall[len(fake.enhancementsRepositoryDefaultTargetBranchArgsForCall)]
	fake.enhancementsRepositoryDefaultTargetBranchArgsForCall = append(fake.enhancementsRepositoryDefaultTargetBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsRepositoryDefaultTargetBranch", []interface{}{})
	fake.enhancementsRepositoryDefaultTargetBranchMutex.Unlock()
	if fake.EnhancementsRepositoryDefaultTargetBranchStub != nil {
		return fake.EnhancementsRepositoryDefaultTargetBranchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsRepositoryDefaultTargetBranchReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultTargetBranchCallCount() int {
	fake.enhancementsRepositoryDefaultTargetBranchMutex.RLock()
	defer fake.enhancementsRepositoryDefaultTargetBranchMutex.RUnlock()
	return len(fake.enhancementsRepositoryDefaultTargetBranchArgsForCall)
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultTargetBranchReturns(result1 string) {
	fake.EnhancementsRepositoryDefaultTargetBranchStub = nil
	fake.enhancementsRepositoryDefaultTargetBranchReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryDefaultTargetBranchReturnsOnCall(i int, result1 string) {
	fake.EnhancementsRepositoryDefaultTargetBranchStub = nil
	if fake.enhancementsRepositoryDefaultTargetBranchReturnsOnCall == nil {
		fake.enhancementsRepositoryDefaultTargetBranchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsRepositoryDefaultTargetBranchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryOwner() string {
	fake.enhancementsRepositoryOwnerMutex.Lock()
	ret, specificReturn := fake.enhancementsRepositoryOwnerReturnsOnCall[len(fake.enhancementsRepositoryOwnerArgsForCall)]
	fake.enhancementsRepositoryOwnerArgsForCall = append(fake.enhancementsRepositoryOwnerArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsRepositoryOwner", []interface{}{})
	fake.enhancementsRepositoryOwnerMutex.Unlock()
	if fake.EnhancementsRepositoryOwnerStub != nil {
		return fake.EnhancementsRepositoryOwnerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsRepositoryOwnerReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsRepositoryOwnerCallCount() int {
	fake.enhancementsRepositoryOwnerMutex.RLock()
	defer fake.enhancementsRepositoryOwnerMutex.RUnlock()
	return len(fake.enhancementsRepositoryOwnerArgsForCall)
}

func (fake *FakeInstance) EnhancementsRepositoryOwnerReturns(result1 string) {
	fake.EnhancementsRepositoryOwnerStub = nil
	fake.enhancementsRepositoryOwnerReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsRepositoryOwnerReturnsOnCall(i int, result1 string) {
	fake.EnhancementsRepositoryOwnerStub = nil
	if fake.enhancementsRepositoryOwnerReturnsOnCall == nil {
		fake.enhancementsRepositoryOwnerReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsRepositoryOwnerReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepository() string {
	fake.enhancementsTrackingRepositoryMutex.Lock()
	ret, specificReturn := fake.enhancementsTrackingRepositoryReturnsOnCall[len(fake.enhancementsTrackingRepositoryArgsForCall)]
	fake.enhancementsTrackingRepositoryArgsForCall = append(fake.enhancementsTrackingRepositoryArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsTrackingRepository", []interface{}{})
	fake.enhancementsTrackingRepositoryMutex.Unlock()
	if fake.EnhancementsTrackingRepositoryStub != nil {
		return fake.EnhancementsTrackingRepositoryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsTrackingRepositoryReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryCallCount() int {
	fake.enhancementsTrackingRepositoryMutex.RLock()
	defer fake.enhancementsTrackingRepositoryMutex.RUnlock()
	return len(fake.enhancementsTrackingRepositoryArgsForCall)
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryReturns(result1 string) {
	fake.EnhancementsTrackingRepositoryStub = nil
	fake.enhancementsTrackingRepositoryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryReturnsOnCall(i int, result1 string) {
	fake.EnhancementsTrackingRepositoryStub = nil
	if fake.enhancementsTrackingRepositoryReturnsOnCall == nil {
		fake.enhancementsTrackingRepositoryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsTrackingRepositoryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetSource() string {
	fake.enhancementsTrackingRepositoryChangesetSourceMutex.Lock()
	ret, specificReturn := fake.enhancementsTrackingRepositoryChangesetSourceReturnsOnCall[len(fake.enhancementsTrackingRepositoryChangesetSourceArgsForCall)]
	fake.enhancementsTrackingRepositoryChangesetSourceArgsForCall = append(fake.enhancementsTrackingRepositoryChangesetSourceArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsTrackingRepositoryChangesetSource", []interface{}{})
	fake.enhancementsTrackingRepositoryChangesetSourceMutex.Unlock()
	if fake.EnhancementsTrackingRepositoryChangesetSourceStub != nil {
		return fake.EnhancementsTrackingRepositoryChangesetSourceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsTrackingRepositoryChangesetSourceReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetSourceCallCount() int {
	fake.enhancementsTrackingRepositoryChangesetSourceMutex.RLock()
	defer fake.enhancementsTrackingRepositoryChangesetSourceMutex.RUnlock()
	return len(fake.enhancementsTrackingRepositoryChangesetSourceArgsForCall)
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetSourceReturns(result1 string) {
	fake.EnhancementsTrackingRepositoryChangesetSourceStub = nil
	fake.enhancementsTrackingRepositoryChangesetSourceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetSourceReturnsOnCall(i int, result1 string) {
	fake.EnhancementsTrackingRepositoryChangesetSourceStub = nil
	if fake.enhancementsTrackingRepositoryChangesetSourceReturnsOnCall == nil {
		fake.enhancementsTrackingRepositoryChangesetSourceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsTrackingRepositoryChangesetSourceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetTarget() string {
	fake.enhancementsTrackingRepositoryChangesetTargetMutex.Lock()
	ret, specificReturn := fake.enhancementsTrackingRepositoryChangesetTargetReturnsOnCall[len(fake.enhancementsTrackingRepositoryChangesetTargetArgsForCall)]
	fake.enhancementsTrackingRepositoryChangesetTargetArgsForCall = append(fake.enhancementsTrackingRepositoryChangesetTargetArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsTrackingRepositoryChangesetTarget", []interface{}{})
	fake.enhancementsTrackingRepositoryChangesetTargetMutex.Unlock()
	if fake.EnhancementsTrackingRepositoryChangesetTargetStub != nil {
		return fake.EnhancementsTrackingRepositoryChangesetTargetStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsTrackingRepositoryChangesetTargetReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetTargetCallCount() int {
	fake.enhancementsTrackingRepositoryChangesetTargetMutex.RLock()
	defer fake.enhancementsTrackingRepositoryChangesetTargetMutex.RUnlock()
	return len(fake.enhancementsTrackingRepositoryChangesetTargetArgsForCall)
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetTargetReturns(result1 string) {
	fake.EnhancementsTrackingRepositoryChangesetTargetStub = nil
	fake.enhancementsTrackingRepositoryChangesetTargetReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryChangesetTargetReturnsOnCall(i int, result1 string) {
	fake.EnhancementsTrackingRepositoryChangesetTargetStub = nil
	if fake.enhancementsTrackingRepositoryChangesetTargetReturnsOnCall == nil {
		fake.enhancementsTrackingRepositoryChangesetTargetReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsTrackingRepositoryChangesetTargetReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultSourceBranch() string {
	fake.enhancementsTrackingRepositoryDefaultSourceBranchMutex.Lock()
	ret, specificReturn := fake.enhancementsTrackingRepositoryDefaultSourceBranchReturnsOnCall[len(fake.enhancementsTrackingRepositoryDefaultSourceBranchArgsForCall)]
	fake.enhancementsTrackingRepositoryDefaultSourceBranchArgsForCall = append(fake.enhancementsTrackingRepositoryDefaultSourceBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsTrackingRepositoryDefaultSourceBranch", []interface{}{})
	fake.enhancementsTrackingRepositoryDefaultSourceBranchMutex.Unlock()
	if fake.EnhancementsTrackingRepositoryDefaultSourceBranchStub != nil {
		return fake.EnhancementsTrackingRepositoryDefaultSourceBranchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsTrackingRepositoryDefaultSourceBranchReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultSourceBranchCallCount() int {
	fake.enhancementsTrackingRepositoryDefaultSourceBranchMutex.RLock()
	defer fake.enhancementsTrackingRepositoryDefaultSourceBranchMutex.RUnlock()
	return len(fake.enhancementsTrackingRepositoryDefaultSourceBranchArgsForCall)
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultSourceBranchReturns(result1 string) {
	fake.EnhancementsTrackingRepositoryDefaultSourceBranchStub = nil
	fake.enhancementsTrackingRepositoryDefaultSourceBranchReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultSourceBranchReturnsOnCall(i int, result1 string) {
	fake.EnhancementsTrackingRepositoryDefaultSourceBranchStub = nil
	if fake.enhancementsTrackingRepositoryDefaultSourceBranchReturnsOnCall == nil {
		fake.enhancementsTrackingRepositoryDefaultSourceBranchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsTrackingRepositoryDefaultSourceBranchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultTargetBranch() string {
	fake.enhancementsTrackingRepositoryDefaultTargetBranchMutex.Lock()
	ret, specificReturn := fake.enhancementsTrackingRepositoryDefaultTargetBranchReturnsOnCall[len(fake.enhancementsTrackingRepositoryDefaultTargetBranchArgsForCall)]
	fake.enhancementsTrackingRepositoryDefaultTargetBranchArgsForCall = append(fake.enhancementsTrackingRepositoryDefaultTargetBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsTrackingRepositoryDefaultTargetBranch", []interface{}{})
	fake.enhancementsTrackingRepositoryDefaultTargetBranchMutex.Unlock()
	if fake.EnhancementsTrackingRepositoryDefaultTargetBranchStub != nil {
		return fake.EnhancementsTrackingRepositoryDefaultTargetBranchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsTrackingRepositoryDefaultTargetBranchReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultTargetBranchCallCount() int {
	fake.enhancementsTrackingRepositoryDefaultTargetBranchMutex.RLock()
	defer fake.enhancementsTrackingRepositoryDefaultTargetBranchMutex.RUnlock()
	return len(fake.enhancementsTrackingRepositoryDefaultTargetBranchArgsForCall)
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultTargetBranchReturns(result1 string) {
	fake.EnhancementsTrackingRepositoryDefaultTargetBranchStub = nil
	fake.enhancementsTrackingRepositoryDefaultTargetBranchReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryDefaultTargetBranchReturnsOnCall(i int, result1 string) {
	fake.EnhancementsTrackingRepositoryDefaultTargetBranchStub = nil
	if fake.enhancementsTrackingRepositoryDefaultTargetBranchReturnsOnCall == nil {
		fake.enhancementsTrackingRepositoryDefaultTargetBranchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsTrackingRepositoryDefaultTargetBranchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryOwner() string {
	fake.enhancementsTrackingRepositoryOwnerMutex.Lock()
	ret, specificReturn := fake.enhancementsTrackingRepositoryOwnerReturnsOnCall[len(fake.enhancementsTrackingRepositoryOwnerArgsForCall)]
	fake.enhancementsTrackingRepositoryOwnerArgsForCall = append(fake.enhancementsTrackingRepositoryOwnerArgsForCall, struct {
	}{})
	fake.recordInvocation("EnhancementsTrackingRepositoryOwner", []interface{}{})
	fake.enhancementsTrackingRepositoryOwnerMutex.Unlock()
	if fake.EnhancementsTrackingRepositoryOwnerStub != nil {
		return fake.EnhancementsTrackingRepositoryOwnerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enhancementsTrackingRepositoryOwnerReturns
	return fakeReturns.result1
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryOwnerCallCount() int {
	fake.enhancementsTrackingRepositoryOwnerMutex.RLock()
	defer fake.enhancementsTrackingRepositoryOwnerMutex.RUnlock()
	return len(fake.enhancementsTrackingRepositoryOwnerArgsForCall)
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryOwnerReturns(result1 string) {
	fake.EnhancementsTrackingRepositoryOwnerStub = nil
	fake.enhancementsTrackingRepositoryOwnerReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) EnhancementsTrackingRepositoryOwnerReturnsOnCall(i int, result1 string) {
	fake.EnhancementsTrackingRepositoryOwnerStub = nil
	if fake.enhancementsTrackingRepositoryOwnerReturnsOnCall == nil {
		fake.enhancementsTrackingRepositoryOwnerReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.enhancementsTrackingRepositoryOwnerReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInstance) IsAuthorized(arg1 settings.Runtime) (bool, error) {
	fake.isAuthorizedMutex.Lock()
	ret, specificReturn := fake.isAuthorizedReturnsOnCall[len(fake.isAuthorizedArgsForCall)]
	fake.isAuthorizedArgsForCall = append(fake.isAuthorizedArgsForCall, struct {
		arg1 settings.Runtime
	}{arg1})
	fake.recordInvocation("IsAuthorized", []interface{}{arg1})
	fake.isAuthorizedMutex.Unlock()
	if fake.IsAuthorizedStub != nil {
		return fake.IsAuthorizedStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isAuthorizedReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInstance) IsAuthorizedCallCount() int {
	fake.isAuthorizedMutex.RLock()
	defer fake.isAuthorizedMutex.RUnlock()
	return len(fake.isAuthorizedArgsForCall)
}

func (fake *FakeInstance) IsAuthorizedArgsForCall(i int) settings.Runtime {
	fake.isAuthorizedMutex.RLock()
	defer fake.isAuthorizedMutex.RUnlock()
	argsForCall := fake.isAuthorizedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInstance) IsAuthorizedReturns(result1 bool, result2 error) {
	fake.IsAuthorizedStub = nil
	fake.isAuthorizedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeInstance) IsAuthorizedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsAuthorizedStub = nil
	if fake.isAuthorizedReturnsOnCall == nil {
		fake.isAuthorizedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isAuthorizedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeInstance) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.apiReviewRepositoryMutex.RLock()
	defer fake.apiReviewRepositoryMutex.RUnlock()
	fake.apiReviewRepositoryChangesetSourceMutex.RLock()
	defer fake.apiReviewRepositoryChangesetSourceMutex.RUnlock()
	fake.apiReviewRepositoryChangesetTargetMutex.RLock()
	defer fake.apiReviewRepositoryChangesetTargetMutex.RUnlock()
	fake.apiReviewRepositoryDefaultSourceBranchMutex.RLock()
	defer fake.apiReviewRepositoryDefaultSourceBranchMutex.RUnlock()
	fake.apiReviewRepositoryDefaultTargetBranchMutex.RLock()
	defer fake.apiReviewRepositoryDefaultTargetBranchMutex.RUnlock()
	fake.apiReviewRepositoryOwnerMutex.RLock()
	defer fake.apiReviewRepositoryOwnerMutex.RUnlock()
	fake.enhancementsRepositoryMutex.RLock()
	defer fake.enhancementsRepositoryMutex.RUnlock()
	fake.enhancementsRepositoryChangesetSourceMutex.RLock()
	defer fake.enhancementsRepositoryChangesetSourceMutex.RUnlock()
	fake.enhancementsRepositoryChangesetTargetMutex.RLock()
	defer fake.enhancementsRepositoryChangesetTargetMutex.RUnlock()
	fake.enhancementsRepositoryDefaultSourceBranchMutex.RLock()
	defer fake.enhancementsRepositoryDefaultSourceBranchMutex.RUnlock()
	fake.enhancementsRepositoryDefaultTargetBranchMutex.RLock()
	defer fake.enhancementsRepositoryDefaultTargetBranchMutex.RUnlock()
	fake.enhancementsRepositoryOwnerMutex.RLock()
	defer fake.enhancementsRepositoryOwnerMutex.RUnlock()
	fake.enhancementsTrackingRepositoryMutex.RLock()
	defer fake.enhancementsTrackingRepositoryMutex.RUnlock()
	fake.enhancementsTrackingRepositoryChangesetSourceMutex.RLock()
	defer fake.enhancementsTrackingRepositoryChangesetSourceMutex.RUnlock()
	fake.enhancementsTrackingRepositoryChangesetTargetMutex.RLock()
	defer fake.enhancementsTrackingRepositoryChangesetTargetMutex.RUnlock()
	fake.enhancementsTrackingRepositoryDefaultSourceBranchMutex.RLock()
	defer fake.enhancementsTrackingRepositoryDefaultSourceBranchMutex.RUnlock()
	fake.enhancementsTrackingRepositoryDefaultTargetBranchMutex.RLock()
	defer fake.enhancementsTrackingRepositoryDefaultTargetBranchMutex.RUnlock()
	fake.enhancementsTrackingRepositoryOwnerMutex.RLock()
	defer fake.enhancementsTrackingRepositoryOwnerMutex.RUnlock()
	fake.isAuthorizedMutex.RLock()
	defer fake.isAuthorizedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstance) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ orgs.Instance = new(FakeInstance)
